{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM50I0a/aTp2cgyE+1GEwcU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Additional Transformation"],"metadata":{"id":"-l6W3I5QoSJI"}},{"cell_type":"markdown","source":["#NAICS CODES EXTRACTION\n","### Peformed on Google Colab\n","### Source:"],"metadata":{"id":"PZ5Y3FgVpKnk"}},{"cell_type":"code","source":["# Get the current working directory\n","current_directory = os.getcwd()\n","\n","# Print the current directory\n","print(f\"Current Directory: {current_directory}\")"],"metadata":{"id":"hlvUNiC0oqlo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import files"],"metadata":{"id":"UPwDAx1PpGLi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Upload the Excel file\n","uploaded = files.upload()"],"metadata":{"id":"ywOIgQI8p8hy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Specify the name of the uploaded file\n","file_name = 'titles.xlsx'\n","\n","# Read the Excel file into a DataFrame\n","excel_df = pd.read_excel(file_name)\n","\n","# Display the DataFrame\n","excel_df.head()"],"metadata":{"id":"o94GerNyp_kx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["excel_df.dtypes"],"metadata":{"id":"HIno2zfwqCVa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Remove the first row\n","excel_df = excel_df.drop(excel_df.index[0])\n","\n","# Reset the index after removing the first row\n","excel_df = excel_df.reset_index(drop=True)\n","\n","# Display first couple of rows to verfiy\n","excel_df.head()"],"metadata":{"id":"hha_Qnf3qGNi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Rename the '2022 NAICS Title' column to '2022_Naics_Sector'\n","excel_df = excel_df.rename(columns={'2022 NAICS Title': '2022_Naics_Sector'})\n","\n","# Display first couple of rows to verfiy\n","excel_df.head()"],"metadata":{"id":"pSOTBOHWqWgu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Rename the '2022 NAICS Code' column to 'NAICSCode'\n","changed_df = excel_df.rename(columns={'2022 NAICS Code': 'NAICSCode'})\n","\n","changed_df.head()"],"metadata":{"id":"G9h9hmzXqZTf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Merge the DataFrames on the 'NAICSCode' column\n","merged_df = pd.merge(merged_df, changed_df[['NAICSCode', '2022_Naics_Sector']], on='NAICSCode', how='left')\n","\n","# Display the updated DataFrame\n","merged_df.head()"],"metadata":{"id":"rRRf8Tk3qarK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#verifying if 2022_Naics_Sector was appened\n","selected_columns = merged_df[['NAICSCode', '2022_Naics_Sector']]\n","\n","# Display the selected columns\n","print(selected_columns)"],"metadata":{"id":"FUwwxECVqgvK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Generate unique IDs for BorrowerID, LocationID, LenderID, and BusinessTypeID\n","merged_df['BorrowerID'] = range(1, len(merged_df) + 1)\n","merged_df['LocationID'] = pd.factorize(merged_df['Project_State'] + '_' + merged_df['Project_City'])[0] + 1\n","merged_df['LenderID'] = pd.factorize(merged_df['Originating_Lender'])[0] + 1\n","merged_df['BusinessTypeID'] = pd.factorize(merged_df['Business_Type'])[0] + 1\n","\n","# Display the updated DataFrame\n","print(merged_df[['BorrowerID', 'LocationID', 'LenderID', 'BusinessTypeID']])"],"metadata":{"id":"DKAr7_sXqh3W"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create a mapping for unique values in 'Loan_Status' to unique IDs\n","loan_status_mapping = {'Paid In Full': 1, 'Charged Off': 2}\n","\n","# Create 'LoanStatusID' based on the mapping\n","merged_df['LoanStatusID'] = merged_df['Loan_Status'].map(loan_status_mapping)\n","\n","# Display the updated DataFrame\n","print(merged_df[['Loan_Status', 'LoanStatusID']])"],"metadata":{"id":"xUvKU4udqkcS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["merged_df"],"metadata":{"id":"FMiYRuJRqngd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Sample check:\")\n","print(merged_df[['Business_Type', 'BusinessTypeID']].sample(10))"],"metadata":{"id":"EXflYuVKqq3c"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Sample check:\")\n","print(merged_df[['Borrower_Name','BorrowerID']].sample(10))"],"metadata":{"id":"hj80Uf2TqvWF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Sample check:\")\n","print(merged_df[['Borrower_Name','BorrowerID']].sample(10))"],"metadata":{"id":"c6DCCQiyqyM8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Sample check:\")\n","print(merged_df[['Originating_Lender','LenderID']].sample(10))"],"metadata":{"id":"OJP2iTM5q0aN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Sample check:\")\n","print(merged_df[['Loan_Status','LoanStatusID']].sample(10))"],"metadata":{"id":"9i1jLZlVq3m5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create a new column 'LoanNumberID' with values from 'Loan_Number'\n","merged_df['LoanNumberID'] = merged_df['Loan_Number']\n","\n","# Display the updated DataFrame\n","print(merged_df[['Loan_Number', 'LoanNumberID']])"],"metadata":{"id":"OaFEfwzSq4dM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def remove_special_characters(df, columns_to_clean):\n","    # Loop through columns and remove special characters\n","    for col in columns_to_clean:\n","        if col in df.columns and df[col].dtype == 'O':  # Check if the column exists and is of object type\n","            df[col] = df[col].astype(str).str.replace('[,()]', '')\n","\n","    return df\n","\n","# List of columns to remove special characters from\n","columns_to_clean = [\n","    'Loan_Number', 'Date_Approved', 'SBAOffice_Code', 'Processing_Method',\n","    'Borrower_Name', 'Borrower_Address', 'Borrower_City', 'Borrower_State',\n","    'Borrower_Zip', 'Loan_Status_Date', 'Loan_Status', 'Term',\n","    'SBAGuaranty_Percentage', 'Initial_Approval_Amount', 'Current_Approval_Amount',\n","    'Undisbursed_Amount', 'Servicing_Lender_Location_ID', 'Servicing_Lender_Name',\n","    'Servicing_Lender_Address', 'Servicing_Lender_City', 'Servicing_Lender_State',\n","    'Servicing_Lender_Zip', 'Rural_Urban_Indicator', 'Hubzone_Indicator',\n","    'LMIIndicator', 'Business_Age_Description', 'Project_City', 'Project_County_Name',\n","    'Project_State', 'Project_Zip', 'CD', 'Jobs_Reported', 'NAICSCode',\n","    'Race', 'Ethnicity', 'Payroll_Proceed', 'Business_Type',\n","    'Originating_Lender_Location_ID', 'Originating_Lender', 'Originating_Lender_City',\n","    'Originating_Lender_State', 'Gender', 'Veteran', 'Forgiveness_Amount',\n","    'Forgiveness_Date'\n","]\n","\n","# Assuming merged_df is your DataFrame\n","merged_df_cleaned = remove_special_characters(merged_df, columns_to_clean)"],"metadata":{"id":"ytzcqP3Mq9dI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["merged_df_cleaned"],"metadata":{"id":"tQqKBvhirAFX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Specify the path where you want to save the CSV file\n","save_directory = '/Users/tam/Downloads/ppploan_clean'\n","\n","# Create the directory if it does not exist\n","os.makedirs(save_directory, exist_ok=True)\n","\n","# Specify the full path including the filename\n","save_path = os.path.join(save_directory, 'ppploan_clean.csv')\n","\n","# Save the DataFrame to CSV\n","merged_df_cleaned.to_csv(save_path, index=False)\n","\n","# Print a confirmation message\n","print(f\"DataFrame saved to: {save_path}\")"],"metadata":{"id":"zCk-_eu9rDwp"},"execution_count":null,"outputs":[]}]}